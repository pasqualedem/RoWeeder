experiment:
  # It contains all the about the grids and the group of runs:
  name: RowWeed # name of the logger platform experiment
  group: MLFormer # name of group of experiments for the logger platform
  continue_with_errors: False # continue with other runs even if a run fails
  start_from_grid: 0 # skip grids in the grid search
  start_from_run: 0 # skip runs from the selected grid
  search: grid
  task: segmentation
  # n_trials: 5

parameters:
  # Contains the parameters to build the grid.
  # Each value should be a dict or a list
  seed: &seed [42] # random seed to set

  tracker:
    ignored_files: ["*.bin,*.safetensors"]
    cache_directory: [wandb_cache]
    train_image_log_frequency: [20]
    val_image_log_frequency: [10]
    test_image_log_frequency: [10]
    tags: [[Focal, ML]]

  train:
    max_epochs: [30]
    compile: [False]
    initial_lr: [0.001]
    optimizer: [AdamW]
    # scheduler:
    #   type: [reduce_lr_on_plateau]
    #   step_moment: [epoch]
    #   patience: [0]
    watch_metric: [F1Score]
    freeze_backbone: [False]
    check_nan: [1] # check for nan every n batches

  loss:
    class_weighting: [True]
    components:
      - focal:
          weight: 1.0

  model:
    name: [mlformer] # path to model class or model name contained in EzDL or super-gradients
    params:
      input_channels: &input_channels [['R', 'G', 'B']]
      fusion: [add]

  dataset: # parameters depending on the class you defined for the dataset
    root: [dataset/patches/512] # path to the dataset
    gt_folder: [dataset/generated/69023956/pseudogt] # path to the gt folder
    channels: *input_channels
    train_fields: [["001", "002", "003", "004"]]
    test_fields: [["000"]]
    preprocess:
      mean: [[0.485, 0.456, 0.406]]
      std: [[0.229, 0.224, 0.225]]

  dataloader:
    num_workers: [0]
    batch_size: [16]

  train_metrics:
    JaccardIndex: &metric_params
      num_classes: [3]
      task: [multiclass]
      average: [macro]
    F1Score: *metric_params
  val_metrics:
    JaccardIndex: *metric_params
    F1Score: *metric_params

other_grids:
  -   dataset: # parameters depending on the class you defined for the dataset
        train_fields: [["000", "002", "003", "004"]]
        test_fields: [["001"]]
  -   dataset: # parameters depending on the class you defined for the dataset
        train_fields: [["000", "001", "003", "004"]]
        test_fields: [["002"]]
  -   dataset: # parameters depending on the class you defined for the dataset
        train_fields: [["000", "001", "002", "003"]]
        test_fields: [["004"]]